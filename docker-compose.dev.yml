services:
  # Database
  postgres-dev:
    image: postgres:15-alpine
    container_name: gps-trucks-db-dev
    environment:
      POSTGRES_DB: gps_trucks_japan_dev
      POSTGRES_USER: gp
      POSTGRES_PASSWORD: Megumi12
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gps-dev-network

  # Redis for caching
  redis-dev:
    image: redis:7-alpine
    container_name: gps-trucks-redis-dev
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_dev_data:/data
    networks:
      - gps-dev-network

  # Backend API
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps-trucks-backend-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://gp:Megumi12@postgres-dev:5432/gps_trucks_japan_dev
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_NAME: gps_trucks_japan_dev
      DB_USER: gp
      DB_PASSWORD: Megumi12
      REDIS_URL: redis://redis-dev:6379
      JWT_SECRET: gps-trucks-japan-super-secret-jwt-key-2024-dev
      PORT: 3002
    ports:
      - "3002:3002"
    volumes:
      - ./backend:/app  # Live code reloading for development
      - /app/node_modules
      - ./images:/app/public/images
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
    networks:
      - gps-dev-network
    command: npm run dev  # Use dev command for hot reloading

  # Frontend
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gps-trucks-frontend-dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app  # Live code reloading for development
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-dev
    networks:
      - gps-dev-network
    command: npm run dev

  # Admin Panel
  admin-dev:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: gps-trucks-admin-dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NODE_ENV: development
    ports:
      - "3001:3001"
    volumes:
      - ./admin:/app  # Live code reloading for development
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-dev
    networks:
      - gps-dev-network
    command: npm run dev

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  gps-dev-network:
    driver: bridge